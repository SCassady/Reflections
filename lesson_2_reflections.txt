What happens when you initialize a repository? Why do you need to do it?

An empty git repository is created in the directory. You need to do it to create
a git repository for version control.


How is the staging area different from the working directory and the repository? What value do you think it offers?

It is the intermediary space in between the two. The value it has is that you
can decide which files to commit before doing so, and can change your mind about
them and modify before the commit.


How can you use the staging area to make sure you have one commit per logical change?

You can use diff to check how many files have been changed since your working
directory or last commit, preventing you from committing more than you wanted
to.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When you are experimenting, when in a group and one person is adding changes to a
file. They allow you to discard changes if they don't work out, and if they are
breaking than the master won't be affected. Also, it allows work on the master
to be completed at the same time.


How do the diagrams help you visualize the branch structure?

Commits are basically nodes in the tree that is the repository. Therefore,
graphs are useful to analyze branches and commits.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The changes introduced in both branches are combined into a single, new commit.
They can be represented as graph lines joining because that is what they
essentially are.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

It makes routine merges very quick. The con is that conflict resolution can be
a bit messy because of the strange notation, etc.
